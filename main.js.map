{"version":3,"file":"main.js","mappings":"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","sources":["webpack://helpdesk/webpack/bootstrap","webpack://helpdesk/webpack/runtime/global","webpack://helpdesk/webpack/runtime/publicPath","webpack://helpdesk/./src/js/TicketView.js","webpack://helpdesk/./src/js/TicketForm.js","webpack://helpdesk/./src/js/TicketConfirm.js","webpack://helpdesk/./src/js/api/createRequest.js","webpack://helpdesk/./src/js/app.js","webpack://helpdesk/./src/js/HelpDesk.js","webpack://helpdesk/./src/js/TicketService.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// класс для отображения тикетов на странице, содержит методы для генерации разметки тикета\nimport done from \"../img/done.png\";\nimport edit from \"../img/edit.png\";\nimport del from \"../img/delete.png\";\n\nclass TicketView {\n  // метод для рендеринга DOM-элемента тикета, содержит логику создания кнопок и скрытия описания при нажатии на тело тикета\n  render(ticket) {\n    const ticketElement = document.createElement(\"div\");\n    ticketElement.className = \"ticket\";\n    ticketElement.dataset.id = ticket.id;\n\n    ticketElement.innerHTML = `\n      <div class=\"ticket-content\">\n        <div class=\"ticket-header\">\n          <div class=\"ticket-status\">\n            ${this.createButton(\"done-btn\", ticket.status ? done : \"\")}\n          </div>\n          <span class=\"ticket-title\">${ticket.name}</span>\n          <span class=\"ticket-date\">${this.formatDate(ticket.created)}</span>\n          <div class=\"ticket-actions\">\n            ${this.createButton(\"edit-btn\", edit)}\n            ${this.createButton(\"delete-btn\", del)}\n          </div>\n        </div>\n        <div class=\"ticket-description hidden\">${ticket.description}</div>\n      </div>\n    `;\n\n    this.addClickEvent(ticketElement);\n\n    return ticketElement;\n  }\n\n  // универсальный метод для создания кнопки с изображением\n  createButton(className, image) {\n    return `\n      <div class=\"ticket-btn ${className}\">\n        ${image ? `<img src=\"${image}\" />` : \"\"}\n      </div>\n    `;\n  }\n\n  // метод для форматирования даты в нужном формате\n  formatDate(ticket) {\n    const date = new Date(ticket);\n    const formatter = new Intl.DateTimeFormat(\"ru-RU\", {\n      year: \"2-digit\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n\n    return formatter.format(date).replace(\",\", \"\");\n  }\n\n  // обработчик события клика на тело тикета, скрывает или показывает описание в зависимости от текущего состояния\n  addClickEvent(ticketElement) {\n    ticketElement.addEventListener(\"click\", (event) => {\n      if (!event.target.closest(\".ticket-btn\")) {\n        const description = ticketElement.querySelector(\".ticket-description\");\n        description.classList.toggle(\"hidden\");\n      }\n    });\n  }\n}\n\nexport default TicketView;\n","// класс для создания формы создания нового тикета\nclass TicketForm {\n  constructor() {\n    this.modal = null;\n    this.onSubmit = null;\n  }\n\n  // отображение модального окна с формой создания/редактирования тикета\n  show(ticket = null, onSubmit) {\n    this.ticket = ticket; // если ticket === null, форма создаёт новый тикет\n    this.onSubmit = onSubmit;\n    this.render();\n  }\n\n  render() {\n    this.close();\n\n    const modal = document.createElement(\"div\");\n    modal.className = \"modal-overlay\";\n\n    modal.innerHTML = `\n      <div class=\"modal\">\n        <div class=\"modal-header\">\n          <h3>${this.ticket ? \"Изменить тикет\" : \"Добавить тикет\"}</h3>\n        </div>\n        <div class=\"modal-body\">\n          <label>\n            Краткое описание\n            <input type=\"text\" class=\"short-description\" value=\"${this.ticket ? this.ticket.name : \"\"}\" required>\n          </label>\n          <label>\n            Подробное описание\n            <textarea class=\"full-description\">${this.ticket ? this.ticket.description : \"\"}</textarea>\n          </label>\n        </div>\n        <div class=\"modal-footer\">\n          <button class=\"cancel-btn\">Отмена</button>\n          <button class=\"save-btn\">Ок</button>\n        </div>\n      </div>\n    `;\n\n    this.modal = modal;\n    document.querySelector(\".helpdesk\").appendChild(modal);\n\n    this.addModalEventListeners();\n  }\n\n  // обработчик событий для модального окна\n  addModalEventListeners() {\n    this.modal\n      .querySelector(\".cancel-btn\")\n      .addEventListener(\"click\", () => this.close());\n    this.modal\n      .querySelector(\".save-btn\")\n      .addEventListener(\"click\", () => this.handleSubmit());\n  }\n\n  // обработка нажатия на кнопку \"Сохранить\" и отправка формы\n  handleSubmit() {\n    const shortDescription = this.modal\n      .querySelector(\".short-description\")\n      .value.trim();\n    const fullDescription = this.modal\n      .querySelector(\".full-description\")\n      .value.trim();\n\n    if (!shortDescription) {\n      alert(\"Краткое описание обязательно!\");\n      return;\n    }\n\n    this.onSubmit({ name: shortDescription, description: fullDescription });\n    this.onSubmit = null;\n    this.close();\n  }\n\n  // закрытие модального окна\n  close() {\n    document.querySelector(\".modal-overlay\")?.remove();\n    this.modal = null;\n  }\n}\n\nexport default TicketForm;\n","// класс для создания окна подтверждения удаления тикета\nclass TicketConfirm {\n  constructor() {\n    this.modal = null;\n    this.onConfirm = null;\n  }\n\n  show(onConfirm) {\n    this.onConfirm = onConfirm;\n    this.render();\n  }\n\n  render() {\n    this.close();\n\n    const modal = document.createElement(\"div\");\n    modal.className = \"modal-overlay\";\n\n    modal.innerHTML = `\n      <div class=\"modal\">\n        <div class=\"modal-header\">\n          <h3>Удалить тикет</h3>\n        </div>\n        <div class=\"modal-body\">\n          <p>Вы уверены, что хотите удалить этот тикет? Это действие необратимо.</p>\n        </div>\n        <div class=\"modal-footer\">\n          <button class=\"cancel-btn\">Отмена</button>\n          <button class=\"ok-btn\">Ok</button>\n        </div>\n      </div>\n    `;\n\n    this.modal = modal;\n    document.querySelector(\".helpdesk\").appendChild(modal);\n\n    this.addModalEventListeners();\n  }\n\n  // Добавление обработчиков событий для модального окна\n  addModalEventListeners() {\n    this.modal\n      .querySelector(\".cancel-btn\")\n      .addEventListener(\"click\", () => this.close());\n    this.modal.querySelector(\".ok-btn\").addEventListener(\"click\", () => {\n      this.onConfirm();\n      this.onConfirm = null;\n      this.close();\n    });\n  }\n\n  // Закрытие модального окна\n  close() {\n    document.querySelector(\".modal-overlay\")?.remove();\n    this.modal = null;\n  }\n}\n\nexport default TicketConfirm;\n","const createRequest = async ({ url, method, data }) => {\n  // опции запроса: метод, заголовки и тело (если есть)\n  const options = {\n    method,\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n\n  if (data) options.body = JSON.stringify(data);\n\n  const response = await fetch(url, options);\n\n  // если ответ не успешен, выводит ошибку\n  if (!response.ok) console.error(`HTTP error! status: ${response.status}`);\n\n  // если ответом является пустое тело (например, при DELETE), возвращает null\n  if (response.status === 204) return null;\n\n  return await response.json();\n};\n\nexport default createRequest;\n","import HelpDesk from \"./HelpDesk\";\nimport TicketService from \"./TicketService\";\n\nconst root = document.getElementById(\"root\");\n\nconst ticketService = new TicketService(\"http://localhost:7070\");\nconst app = new HelpDesk(root, ticketService);\n\napp.init();\n","// основной класс приложения\nimport TicketView from \"./TicketView\";\nimport TicketForm from \"./TicketForm\";\nimport TicketConfirm from \"./TicketConfirm\";\n\nclass HelpDesk {\n  constructor(container, ticketService) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error(\"This is not an HTML element!\");\n    }\n    this.container = container;\n    this.ticketService = ticketService;\n    this.tickets = [];\n    this.ticketView = new TicketView();\n    this.ticketForm = new TicketForm();\n    this.TicketConfirm = new TicketConfirm();\n  }\n\n  // Инициализация приложения\n  init() {\n    this.render();\n    this.loadTickets();\n    this.addEventListeners();\n  }\n\n  // Загрузка тикетов с сервера\n  loadTickets() {\n    this.ticketService.list((tickets) => {\n      this.tickets = tickets;\n      this.renderTickets();\n    });\n  }\n\n  // Отображение тикетов в интерфейсе\n  renderTickets() {\n    const ticketsContainer = this.container.querySelector(\".tickets\");\n    ticketsContainer.innerHTML = \"\";\n    this.tickets.forEach((ticket) => {\n      const ticketElement = this.ticketView.render(ticket);\n      ticketsContainer.appendChild(ticketElement);\n\n      // Обработчики для тикета\n      this.addTicketEventListeners(ticketElement, ticket);\n    });\n  }\n\n  // Отображение интерфейса приложения\n  render() {\n    this.container.innerHTML = `\n      <div class=\"helpdesk\">\n        <div class=\"header-bar\">\n          <div class=\"dots\">\n            <span class=\"dot\"></span>\n            <span class=\"dot\"></span>\n            <span class=\"dot\"></span>\n          </div>\n        </div>\n        <button class=\"add-ticket-btn\">Добавить тикет</button>\n        <div class=\"tickets\"></div>\n      </div>\n    `;\n  }\n\n  // Обработчик клика на кнопку добавления тикета\n  addEventListeners() {\n    const addTicketBtn = this.container.querySelector(\".add-ticket-btn\");\n    addTicketBtn.addEventListener(\"click\", () => {\n      this.ticketForm.show(null, (data) => this.createTicket(data));\n    });\n  }\n\n  // Обработчики событий для кнопок тикета\n  addTicketEventListeners(ticketElement, ticket) {\n    const editBtn = ticketElement.querySelector(\".edit-btn\");\n    editBtn.addEventListener(\"click\", () => {\n      this.ticketForm.show(ticket, (updatedData) =>\n        this.updateTicket(ticket.id, updatedData),\n      );\n    });\n\n    const deleteBtn = ticketElement.querySelector(\".delete-btn\");\n    deleteBtn.addEventListener(\"click\", () => {\n      this.deleteTicket(ticket.id);\n    });\n\n    const doneBtn = ticketElement.querySelector(\".done-btn\");\n    doneBtn.addEventListener(\"click\", () => {\n      this.updateTicket(ticket.id, { status: !ticket.status });\n    });\n  }\n\n  // Создание нового тикета\n  createTicket(data) {\n    this.ticketService.create(data, (newTicket) => {\n      this.tickets.push(newTicket);\n      this.loadTickets();\n    });\n  }\n\n  // Обновление тикета\n  updateTicket(id, data) {\n    this.ticketService.update(id, data, () => {\n      this.loadTickets();\n    });\n  }\n\n  // Удаление тикета\n  deleteTicket(id) {\n    this.TicketConfirm.show(() => {\n      this.ticketService.delete(id, () => {\n        this.loadTickets();\n      });\n    });\n  }\n}\n\nexport default HelpDesk;\n","// класс для связи с сервером, содержит методы для отправки запросов на сервер и получения ответов\nimport createRequest from \"./api/createRequest\";\n\nclass TicketService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  // получает список всех тикетов\n  list(callback) {\n    const url = `${this.baseUrl}?method=allTickets`;\n    createRequest({ url, method: \"GET\" }).then(callback);\n  }\n\n  // получает тикет по ID\n  get(id, callback) {\n    const url = `${this.baseUrl}?method=ticketById&id=${id}`;\n    createRequest({ url, method: \"GET\" }).then(callback);\n  }\n\n  // создаёт новый тикет\n  create(data, callback) {\n    const url = `${this.baseUrl}?method=createTicket`;\n    createRequest({ url, method: \"POST\", data }).then(callback);\n  }\n\n  // обновляет тикет по ID\n  update(id, data, callback) {\n    const url = `${this.baseUrl}?method=updateById&id=${id}`;\n    createRequest({ url, method: \"PUT\", data }).then(callback);\n  }\n\n  // удаляет тикет по ID\n  delete(id, callback) {\n    const url = `${this.baseUrl}?method=deleteById&id=${id}`;\n    createRequest({ url, method: \"DELETE\" }).then(() => callback());\n  }\n}\n\nexport default TicketService;\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","render","ticket","ticketElement","createElement","className","dataset","id","innerHTML","createButton","status","done","name","formatDate","created","edit","del","description","addClickEvent","image","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","format","addEventListener","event","target","closest","querySelector","classList","toggle","constructor","modal","onSubmit","show","close","appendChild","addModalEventListeners","handleSubmit","shortDescription","value","trim","fullDescription","alert","remove","onConfirm","async","url","method","data","options","headers","body","JSON","stringify","response","fetch","ok","console","error","json","container","ticketService","HTMLElement","tickets","ticketView","TicketView","ticketForm","TicketForm","TicketConfirm","init","loadTickets","addEventListeners","list","renderTickets","ticketsContainer","forEach","addTicketEventListeners","createTicket","updatedData","updateTicket","deleteTicket","create","newTicket","push","update","delete","getElementById","baseUrl","callback","createRequest","then","get"],"sourceRoot":""}