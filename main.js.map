{"version":3,"file":"main.js","mappings":"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","sources":["webpack://helpdesk/webpack/bootstrap","webpack://helpdesk/webpack/runtime/global","webpack://helpdesk/webpack/runtime/publicPath","webpack://helpdesk/./src/js/HelpDesk.js","webpack://helpdesk/./src/js/api/createRequest.js","webpack://helpdesk/./src/js/app.js","webpack://helpdesk/./src/js/TicketService.js","webpack://helpdesk/./src/js/TicketView.js","webpack://helpdesk/./src/js/TicketForm.js","webpack://helpdesk/./src/js/TicketConfirm.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// основной класс приложения\nclass HelpDesk {\n  constructor(container, ticketService, ticketView, ticketForm, ticketConfirm) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error(\"This is not an HTML element!\");\n    }\n    this.container = container;\n    this.ticketService = ticketService;\n    this.tickets = [];\n    this.ticketView = ticketView;\n    this.ticketForm = ticketForm;\n    this.TicketConfirm = ticketConfirm;\n  }\n\n  // Инициализация приложения\n  init() {\n    this.render();\n    this.loadTickets();\n    this.addEventListeners();\n  }\n\n  // Загрузка тикетов с сервера\n  loadTickets() {\n    this.ticketService.list((tickets) => {\n      this.tickets = tickets;\n      this.renderTickets();\n    });\n  }\n\n  // Отображение тикетов в интерфейсе\n  renderTickets() {\n    const ticketsContainer = this.container.querySelector(\".tickets\");\n    ticketsContainer.innerHTML = \"\";\n    this.tickets.forEach((ticket) => {\n      const ticketElement = this.ticketView.render(ticket);\n      ticketsContainer.appendChild(ticketElement);\n\n      // Обработчики для тикета\n      this.addTicketEventListeners(ticketElement, ticket);\n    });\n  }\n\n  // Отображение интерфейса приложения\n  render() {\n    this.container.innerHTML = `\n      <div class=\"helpdesk\">\n        <div class=\"header-bar\">\n          <div class=\"dots\">\n            <span class=\"dot\"></span>\n            <span class=\"dot\"></span>\n            <span class=\"dot\"></span>\n          </div>\n        </div>\n        <button class=\"add-ticket-btn\">Добавить тикет</button>\n        <div class=\"tickets\"></div>\n      </div>\n    `;\n  }\n\n  // Обработчик клика на кнопку добавления тикета\n  addEventListeners() {\n    const addTicketBtn = this.container.querySelector(\".add-ticket-btn\");\n    addTicketBtn.addEventListener(\"click\", () => {\n      this.ticketForm.show(null, (data) => this.createTicket(data));\n    });\n  }\n\n  // Обработчики событий для кнопок тикета\n  addTicketEventListeners(ticketElement, ticket) {\n    const editBtn = ticketElement.querySelector(\".edit-btn\");\n    editBtn.addEventListener(\"click\", () => {\n      this.ticketForm.show(ticket, (updatedData) =>\n        this.updateTicket(ticket.id, updatedData),\n      );\n    });\n\n    const deleteBtn = ticketElement.querySelector(\".delete-btn\");\n    deleteBtn.addEventListener(\"click\", () => {\n      this.deleteTicket(ticket.id);\n    });\n\n    const doneBtn = ticketElement.querySelector(\".done-btn\");\n    doneBtn.addEventListener(\"click\", () => {\n      this.updateTicket(ticket.id, { status: !ticket.status });\n    });\n  }\n\n  // Создание нового тикета\n  createTicket(data) {\n    this.ticketService.create(data, (newTicket) => {\n      this.tickets.push(newTicket);\n      this.loadTickets();\n    });\n  }\n\n  // Обновление тикета\n  updateTicket(id, data) {\n    this.ticketService.update(id, data, () => {\n      this.loadTickets();\n    });\n  }\n\n  // Удаление тикета\n  deleteTicket(id) {\n    this.TicketConfirm.show(() => {\n      this.ticketService.delete(id, () => {\n        this.loadTickets();\n      });\n    });\n  }\n}\n\nexport default HelpDesk;\n","const createRequest = async ({ url, method, data }) => {\n  // опции запроса: метод, заголовки и тело (если есть)\n  const options = {\n    method,\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n\n  if (data) options.body = JSON.stringify(data);\n\n  const response = await fetch(url, options);\n\n  // если ответ не успешен, выводит ошибку\n  if (!response.ok) console.error(`HTTP error! status: ${response.status}`);\n\n  // если ответом является пустое тело (например, при DELETE), возвращает null\n  if (response.status === 204) return null;\n\n  return await response.json();\n};\n\nexport default createRequest;\n","import HelpDesk from \"./HelpDesk\";\nimport TicketService from \"./TicketService\";\nimport TicketView from \"./TicketView\";\nimport TicketForm from \"./TicketForm\";\nimport TicketConfirm from \"./TicketConfirm\";\n\nconst root = document.getElementById(\"root\");\n\nconst ticketService = new TicketService(\"http://localhost:7070\");\nconst ticketView = new TicketView();\nconst ticketForm = new TicketForm();\nconst ticketConfirm = new TicketConfirm();\n\nconst app = new HelpDesk(root, ticketService, ticketView, ticketForm, ticketConfirm);\n\napp.init();\n","// класс для связи с сервером, содержит методы для отправки запросов на сервер и получения ответов\nimport createRequest from \"./api/createRequest\";\n\nclass TicketService {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  // получает список всех тикетов\n  list(callback) {\n    const url = `${this.baseUrl}?method=allTickets`;\n    createRequest({ url, method: \"GET\" }).then(callback);\n  }\n\n  // получает тикет по ID\n  get(id, callback) {\n    const url = `${this.baseUrl}?method=ticketById&id=${id}`;\n    createRequest({ url, method: \"GET\" }).then(callback);\n  }\n\n  // создаёт новый тикет\n  create(data, callback) {\n    const url = `${this.baseUrl}?method=createTicket`;\n    createRequest({ url, method: \"POST\", data }).then(callback);\n  }\n\n  // обновляет тикет по ID\n  update(id, data, callback) {\n    const url = `${this.baseUrl}?method=updateById&id=${id}`;\n    createRequest({ url, method: \"PUT\", data }).then(callback);\n  }\n\n  // удаляет тикет по ID\n  delete(id, callback) {\n    const url = `${this.baseUrl}?method=deleteById&id=${id}`;\n    createRequest({ url, method: \"DELETE\" }).then(() => callback());\n  }\n}\n\nexport default TicketService;\n","// класс для отображения тикетов на странице, содержит методы для генерации разметки тикета\nimport done from \"../img/done.png\";\nimport edit from \"../img/edit.png\";\nimport del from \"../img/delete.png\";\n\nclass TicketView {\n  // метод для рендеринга DOM-элемента тикета, содержит логику создания кнопок и скрытия описания при нажатии на тело тикета\n  render(ticket) {\n    const ticketElement = document.createElement(\"div\");\n    ticketElement.className = \"ticket\";\n    ticketElement.dataset.id = ticket.id;\n\n    ticketElement.innerHTML = `\n      <div class=\"ticket-content\">\n        <div class=\"ticket-header\">\n          <div class=\"ticket-status\">\n            ${this.createButton(\"done-btn\", ticket.status ? done : \"\")}\n          </div>\n          <span class=\"ticket-title\">${ticket.name}</span>\n          <span class=\"ticket-date\">${this.formatDate(ticket.created)}</span>\n          <div class=\"ticket-actions\">\n            ${this.createButton(\"edit-btn\", edit)}\n            ${this.createButton(\"delete-btn\", del)}\n          </div>\n        </div>\n        <div class=\"ticket-description hidden\">${ticket.description}</div>\n      </div>\n    `;\n\n    this.addClickEvent(ticketElement);\n\n    return ticketElement;\n  }\n\n  // универсальный метод для создания кнопки с изображением\n  createButton(className, image) {\n    return `\n      <div class=\"ticket-btn ${className}\">\n        ${image ? `<img src=\"${image}\" />` : \"\"}\n      </div>\n    `;\n  }\n\n  // метод для форматирования даты в нужном формате\n  formatDate(ticket) {\n    const date = new Date(ticket);\n    const formatter = new Intl.DateTimeFormat(\"ru-RU\", {\n      year: \"2-digit\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n\n    return formatter.format(date).replace(\",\", \"\");\n  }\n\n  // обработчик события клика на тело тикета, скрывает или показывает описание в зависимости от текущего состояния\n  addClickEvent(ticketElement) {\n    ticketElement.addEventListener(\"click\", (event) => {\n      if (!event.target.closest(\".ticket-btn\")) {\n        const description = ticketElement.querySelector(\".ticket-description\");\n        description.classList.toggle(\"hidden\");\n      }\n    });\n  }\n}\n\nexport default TicketView;\n","// класс для создания формы создания нового тикета\nclass TicketForm {\n  constructor() {\n    this.modal = null;\n    this.onSubmit = null;\n  }\n\n  // отображение модального окна с формой создания/редактирования тикета\n  show(ticket = null, onSubmit) {\n    this.ticket = ticket; // если ticket === null, форма создаёт новый тикет\n    this.onSubmit = onSubmit;\n    this.render();\n  }\n\n  render() {\n    this.close();\n\n    const modal = document.createElement(\"div\");\n    modal.className = \"modal-overlay\";\n\n    modal.innerHTML = `\n      <div class=\"modal\">\n        <div class=\"modal-header\">\n          <h3>${this.ticket ? \"Изменить тикет\" : \"Добавить тикет\"}</h3>\n        </div>\n        <div class=\"modal-body\">\n          <label>\n            Краткое описание\n            <input type=\"text\" class=\"short-description\" value=\"${this.ticket ? this.ticket.name : \"\"}\" required>\n          </label>\n          <label>\n            Подробное описание\n            <textarea class=\"full-description\">${this.ticket ? this.ticket.description : \"\"}</textarea>\n          </label>\n        </div>\n        <div class=\"modal-footer\">\n          <button class=\"cancel-btn\">Отмена</button>\n          <button class=\"save-btn\">Ок</button>\n        </div>\n      </div>\n    `;\n\n    this.modal = modal;\n    document.querySelector(\".helpdesk\").appendChild(modal);\n\n    this.addModalEventListeners();\n  }\n\n  // обработчик событий для модального окна\n  addModalEventListeners() {\n    this.modal.querySelector(\".cancel-btn\").addEventListener(\"click\", () => this.close());\n    this.modal.querySelector(\".save-btn\").addEventListener(\"click\", () => this.handleSubmit());\n  }\n\n  // обработка нажатия на кнопку \"Сохранить\" и отправка формы\n  handleSubmit() {\n    const shortDescription = this.modal.querySelector(\".short-description\").value.trim();\n    const fullDescription = this.modal.querySelector(\".full-description\").value.trim();\n\n    if (!shortDescription) {\n      alert(\"Краткое описание обязательно!\");\n      return;\n    }\n\n    this.onSubmit({ name: shortDescription, description: fullDescription });\n    this.onSubmit = null;\n    this.close();\n  }\n\n  // закрытие модального окна\n  close() {\n    document.querySelector(\".modal-overlay\")?.remove();\n    this.modal = null;\n  }\n}\n\nexport default TicketForm;\n","// класс для создания окна подтверждения удаления тикета\nclass TicketConfirm {\n  constructor() {\n    this.modal = null;\n    this.onConfirm = null;\n  }\n\n  show(onConfirm) {\n    this.onConfirm = onConfirm;\n    this.render();\n  }\n\n  render() {\n    this.close();\n\n    const modal = document.createElement(\"div\");\n    modal.className = \"modal-overlay\";\n\n    modal.innerHTML = `\n      <div class=\"modal\">\n        <div class=\"modal-header\">\n          <h3>Удалить тикет</h3>\n        </div>\n        <div class=\"modal-body\">\n          <p>Вы уверены, что хотите удалить этот тикет? Это действие необратимо.</p>\n        </div>\n        <div class=\"modal-footer\">\n          <button class=\"cancel-btn\">Отмена</button>\n          <button class=\"ok-btn\">Ok</button>\n        </div>\n      </div>\n    `;\n\n    this.modal = modal;\n    document.querySelector(\".helpdesk\").appendChild(modal);\n\n    this.addModalEventListeners();\n  }\n\n  // Добавление обработчиков событий для модального окна\n  addModalEventListeners() {\n    this.modal.querySelector(\".cancel-btn\").addEventListener(\"click\", () => this.close());\n    this.modal.querySelector(\".ok-btn\").addEventListener(\"click\", () => {\n      this.onConfirm();\n      this.onConfirm = null;\n      this.close();\n    });\n  }\n\n  // Закрытие модального окна\n  close() {\n    document.querySelector(\".modal-overlay\")?.remove();\n    this.modal = null;\n  }\n}\n\nexport default TicketConfirm;\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","async","url","method","data","options","headers","body","JSON","stringify","response","fetch","ok","console","error","status","json","constructor","container","ticketService","ticketView","ticketForm","ticketConfirm","HTMLElement","tickets","TicketConfirm","init","render","loadTickets","addEventListeners","list","renderTickets","ticketsContainer","querySelector","innerHTML","forEach","ticket","ticketElement","appendChild","addTicketEventListeners","addEventListener","show","createTicket","updatedData","updateTicket","id","deleteTicket","create","newTicket","push","update","delete","getElementById","baseUrl","callback","createRequest","then","get","createElement","className","dataset","createButton","done","name","formatDate","created","edit","del","description","addClickEvent","image","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","format","event","target","closest","classList","toggle","modal","onSubmit","close","addModalEventListeners","handleSubmit","shortDescription","value","trim","fullDescription","alert","remove","onConfirm"],"sourceRoot":""}